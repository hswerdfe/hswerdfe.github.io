read_xml_justice() %>%
xml_new_root() %>%
xml_attr_recursive() %>%
mutate(paper_id = paper_id,
ra_id = ra_id,
Language = Language,
LinkToXML = LinkToXML)
},error=function(cond) {
message(paste("AHHHH:", paper_id))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
tibble()
})
one_cont_df
})
xml_attr_recursive <- function(x,
#attr_nm = c("fid", "id"),
doc_index = "1"){
# Number of Children
chldrn <-
x %>%
xml_children()
# Get childs dataframe
# and delete the children to keep the txt column small
if (length(chldrn) > 0 ){
chld_doc_index <- paste0(doc_index, ".", 1:length(chldrn))
fids_dec <- map2(chldrn, chld_doc_index, function(c, di){xml_attr_recursive(c,doc_index = di)})
############################
# Remove XML Children
xml_remove(xml_children(x))
} else{
fids_dec <- tibble() %>%
mutate(num_chldrn = 0) %>%
mutate(txt_word_count = 0)
}
print(fids_dec)
#get list of attributes
attrs_lst <- xml_attrs(x) %>% unlist() %>% as.list()
##################################
# Make dataframe of attributes
# if no attributes get a 1x1 tibble
fids_x <-
if (length(attrs_lst) == 0 ){
tibble(zero_attr = TRUE) %>%
mutate(num_attr = 0)
}else{
data.frame(attrs_lst, stringsAsFactors=FALSE) %>%
as_tibble() %>%
setNames(paste0('attr_', names(.))) %>%
mutate(zero_attr = FALSE) %>%
mutate(num_attr = length(attrs_lst))
}
#get More features for the main node
fids_x <-
fids_x %>%
mutate(doc_index =  doc_index_pad(doc_index)) %>%
mutate(num_chldrn = length(chldrn)) %>%
mutate(num_chldrn_dec = fids_dec %>% pull(num_chldrn) %>% sum()) %>%
mutate(xml_name = xml_name(x))  %>%
mutate(txt = xml_text(x, trim = TRUE)) %>%
mutate(txt_word_count = stri_count(txt,regex="\\S+")) %>%
mutate(txt_word_count_total = fids_dec %>% pull(txt_word_count) %>% sum()) %>%
mutate(terminal_block = length(chldrn) == 0)
#combine node with decendents nod
return (bind_rows(fids_x, fids_dec))
}
content_df_new <-
justice$docs %>%
#filter(! paper_id %in% justice$content_df$paper_id) %>%
sample_n(2) %>%
pmap_dfr(function(paper_id, ra_id, LinkToXML, Language, ...){
one_cont_df <-
tryCatch({
LinkToXML %>%
read_xml_justice() %>%
xml_new_root() %>%
xml_attr_recursive() %>%
mutate(paper_id = paper_id,
ra_id = ra_id,
Language = Language,
LinkToXML = LinkToXML)
},error=function(cond) {
message(paste("AHHHH:", paper_id))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
tibble()
})
one_cont_df
})
xml_attr_recursive <- function(x,
#attr_nm = c("fid", "id"),
doc_index = "1"){
# Number of Children
chldrn <-
x %>%
xml_children()
# Get childs dataframe
# and delete the children to keep the txt column small
if (length(chldrn) > 0 ){
chld_doc_index <- paste0(doc_index, ".", 1:length(chldrn))
fids_dec <- map2(chldrn, chld_doc_index, function(c, di){xml_attr_recursive(c,doc_index = di)})
############################
# Remove XML Children
xml_remove(xml_children(x))
} else{
fids_dec <- tibble() %>%
mutate(num_chldrn = 0) %>%
mutate(txt_word_count = 0)
}
fids_dec<- bind_rows(fids_dec)
#print(fids_dec)
#get list of attributes
attrs_lst <- xml_attrs(x) %>% unlist() %>% as.list()
##################################
# Make dataframe of attributes
# if no attributes get a 1x1 tibble
fids_x <-
if (length(attrs_lst) == 0 ){
tibble(zero_attr = TRUE) %>%
mutate(num_attr = 0)
}else{
data.frame(attrs_lst, stringsAsFactors=FALSE) %>%
as_tibble() %>%
setNames(paste0('attr_', names(.))) %>%
mutate(zero_attr = FALSE) %>%
mutate(num_attr = length(attrs_lst))
}
#get More features for the main node
fids_x <-
fids_x %>%
mutate(doc_index =  doc_index_pad(doc_index)) %>%
mutate(num_chldrn = length(chldrn)) %>%
mutate(num_chldrn_dec = fids_dec %>% pull(num_chldrn) %>% sum()) %>%
mutate(xml_name = xml_name(x))  %>%
mutate(txt = xml_text(x, trim = TRUE)) %>%
mutate(txt_word_count = stri_count(txt,regex="\\S+")) %>%
mutate(txt_word_count_total = fids_dec %>% pull(txt_word_count) %>% sum()) %>%
mutate(terminal_block = length(chldrn) == 0)
#combine node with decendents nod
return (bind_rows(fids_x, fids_dec)))
xml_attr_recursive <- function(x,
#attr_nm = c("fid", "id"),
doc_index = "1"){
# Number of Children
chldrn <-
x %>%
xml_children()
# Get childs dataframe
# and delete the children to keep the txt column small
if (length(chldrn) > 0 ){
chld_doc_index <- paste0(doc_index, ".", 1:length(chldrn))
fids_dec <- map2(chldrn, chld_doc_index, function(c, di){xml_attr_recursive(c,doc_index = di)})
############################
# Remove XML Children
xml_remove(xml_children(x))
} else{
fids_dec <- tibble() %>%
mutate(num_chldrn = 0) %>%
mutate(txt_word_count = 0)
}
fids_dec<- bind_rows(fids_dec)
#print(fids_dec)
#get list of attributes
attrs_lst <- xml_attrs(x) %>% unlist() %>% as.list()
##################################
# Make dataframe of attributes
# if no attributes get a 1x1 tibble
fids_x <-
if (length(attrs_lst) == 0 ){
tibble(zero_attr = TRUE) %>%
mutate(num_attr = 0)
}else{
data.frame(attrs_lst, stringsAsFactors=FALSE) %>%
as_tibble() %>%
setNames(paste0('attr_', names(.))) %>%
mutate(zero_attr = FALSE) %>%
mutate(num_attr = length(attrs_lst))
}
#get More features for the main node
fids_x <-
fids_x %>%
mutate(doc_index =  doc_index_pad(doc_index)) %>%
mutate(num_chldrn = length(chldrn)) %>%
mutate(num_chldrn_dec = fids_dec %>% pull(num_chldrn) %>% sum()) %>%
mutate(xml_name = xml_name(x))  %>%
mutate(txt = xml_text(x, trim = TRUE)) %>%
mutate(txt_word_count = stri_count(txt,regex="\\S+")) %>%
mutate(txt_word_count_total = fids_dec %>% pull(txt_word_count) %>% sum()) %>%
mutate(terminal_block = length(chldrn) == 0)
#combine node with decendents nod
return (bind_rows(fids_x, fids_dec))
}
content_df_new <-
justice$docs %>%
#filter(! paper_id %in% justice$content_df$paper_id) %>%
sample_n(2) %>%
pmap_dfr(function(paper_id, ra_id, LinkToXML, Language, ...){
one_cont_df <-
tryCatch({
LinkToXML %>%
read_xml_justice() %>%
xml_new_root() %>%
xml_attr_recursive() %>%
mutate(paper_id = paper_id,
ra_id = ra_id,
Language = Language,
LinkToXML = LinkToXML)
},error=function(cond) {
message(paste("AHHHH:", paper_id))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
tibble()
})
one_cont_df
})
content_df_new
content_df_new
content_df_new$num_chldrn_dec
content_df_new$txt_word_count_total
xml_attr_recursive <- function(x,
#attr_nm = c("fid", "id"),
doc_index = "1"){
# Number of Children
chldrn <-
x %>%
xml_children()
# Get childs dataframe
# and delete the children to keep the txt column small
if (length(chldrn) > 0 ){
chld_doc_index <- paste0(doc_index, ".", 1:length(chldrn))
fids_dec <- map2(chldrn, chld_doc_index, function(c, di){xml_attr_recursive(c,doc_index = di)})
fids_dec<- bind_rows(fids_dec)
############################
# Remove XML Children
xml_remove(xml_children(x))
} else{
fids_dec <- tibble() %>%
mutate(num_chldrn = 0) %>%
mutate(txt_word_count = 0)
}
#print(fids_dec)
#get list of attributes
attrs_lst <- xml_attrs(x) %>% unlist() %>% as.list()
##################################
# Make dataframe of attributes
# if no attributes get a 1x1 tibble
fids_x <-
if (length(attrs_lst) == 0 ){
tibble(zero_attr = TRUE) %>%
mutate(num_attr = 0)
}else{
data.frame(attrs_lst, stringsAsFactors=FALSE) %>%
as_tibble() %>%
setNames(paste0('attr_', names(.))) %>%
mutate(zero_attr = FALSE) %>%
mutate(num_attr = length(attrs_lst))
}
#get More features for the main node
fids_x <-
fids_x %>%
mutate(doc_index =  doc_index_pad(doc_index)) %>%
mutate(num_chldrn = length(chldrn)) %>%
mutate(num_chldrn_dec = fids_dec %>% pull(num_chldrn) %>% sum()) %>%
mutate(xml_name = xml_name(x))  %>%
mutate(txt = xml_text(x, trim = TRUE)) %>%
mutate(txt_word_count = stri_count(txt,regex="\\S+")) %>%
mutate(txt_word_count_total = fids_dec %>% pull(txt_word_count) %>% sum()) %>%
mutate(terminal_block = length(chldrn) == 0)
#combine node with decendents nod
return (bind_rows(fids_x, fids_dec))
}
content_df_new <-
justice$docs %>%
#filter(! paper_id %in% justice$content_df$paper_id) %>%
sample_n(2) %>%
pmap_dfr(function(paper_id, ra_id, LinkToXML, Language, ...){
one_cont_df <-
tryCatch({
LinkToXML %>%
read_xml_justice() %>%
xml_new_root() %>%
xml_attr_recursive() %>%
mutate(paper_id = paper_id,
ra_id = ra_id,
Language = Language,
LinkToXML = LinkToXML)
},error=function(cond) {
message(paste("AHHHH:", paper_id))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
tibble()
})
one_cont_df
})
content_df_new$txt_word_count_total
content_df_new$num_attr
content_df_new$num_chldrn_dec
content_df_new$num_chldrn
content_df_new$num_chldrn_dec
content_df_new$txt_word_count_total
content_df_new$txt_word_count
content_df_new %>% select(doc_index, txt_word_count, txt_word_count_total)
content_df_new %>% select(doc_index, txt_word_count, txt_word_count_total, txt) %>% view()
content_df_new %>% select(ra_id, doc_index, txt_word_count, txt_word_count_total, txt) %>% view()
content_df_new <-
justice$docs %>%
#filter(! paper_id %in% justice$content_df$paper_id) %>%
sample_n(2) %>%
pmap_dfr(function(paper_id, ra_id, LinkToXML, Language, ...){
one_cont_df <-
tryCatch({
LinkToXML %>%
read_xml_justice() %>%
xml_new_root() %>%
xml_attr_recursive() %>%
mutate(paper_id = paper_id,
ra_id = ra_id,
Language = Language,
LinkToXML = LinkToXML)
},error=function(cond) {
message(paste("AHHHH:", paper_id))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
tibble()
})
one_cont_df
})
content_df_new %>% select(ra_id, doc_index, txt_word_count, txt_word_count_total, txt) %>% view()
read_xml_justice <- function(url, ...){
fn <- url_2_local_fn(url)
print(fn)
if (! file.exists(fn)){
dir.create(dirname(fn), recursive=TRUE)
download.file(LinkToXML, fn)
}
xml2::read_xml(fn, ...)
}
read_xml_justice <- function(url, ...){
fn <- url_2_local_fn(url)
print(fn)
if (! file.exists(fn)){
dir.create(dirname(fn), recursive=TRUE)
download.file(url, fn)
}
xml2::read_xml(fn, ...)
}
content_df_new <-
justice$docs %>%
#filter(! paper_id %in% justice$content_df$paper_id) %>%
sample_n(2) %>%
pmap_dfr(function(paper_id, ra_id, LinkToXML, Language, ...){
one_cont_df <-
tryCatch({
LinkToXML %>%
read_xml_justice() %>%
xml_new_root() %>%
xml_attr_recursive() %>%
mutate(paper_id = paper_id,
ra_id = ra_id,
Language = Language,
LinkToXML = LinkToXML)
},error=function(cond) {
message(paste("AHHHH:", paper_id))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
tibble()
})
one_cont_df
})
read_xml_justice <- function(url, ...){
fn <- url_2_local_fn(url)
print(fn)
if (! file.exists(fn)){
dir.create(dirname(fn), recursive=TRUE)
download.file(url = url,destfile =  fn)
}
xml2::read_xml(fn, ...)
}
##################################
#' url = justice$docs$LinkToXML
is_downloaded<- function(url){
fn <- url_2_local_fn(url)
file.exists(fn)
}
content_df_new <-
justice$docs %>%
#filter(! paper_id %in% justice$content_df$paper_id) %>%
sample_n(2) %>%
pmap_dfr(function(paper_id, ra_id, LinkToXML, Language, ...){
one_cont_df <-
tryCatch({
LinkToXML %>%
read_xml_justice() %>%
xml_new_root() %>%
xml_attr_recursive() %>%
mutate(paper_id = paper_id,
ra_id = ra_id,
Language = Language,
LinkToXML = LinkToXML)
},error=function(cond) {
message(paste("AHHHH:", paper_id))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
tibble()
})
one_cont_df
})
##################################
#' url = justice$docs$LinkToXML
is_downloaded<- function(url){
fn <- url_2_local_fn(url)
file.exists(fn)
}
read_xml_justice <- function(url, ...){
fn <- url_2_local_fn(url)
print(fn)
if (! file.exists(fn)){
dir.create(dirname(fn), recursive=TRUE)
download.file(url = url,destfile =  fn)
}
xml2::read_xml(fn, ...)
}
content_df_new <-
justice$docs %>%
#filter(! paper_id %in% justice$content_df$paper_id) %>%
sample_n(2) %>%
pmap_dfr(function(paper_id, ra_id, LinkToXML, Language, ...){
one_cont_df <-
tryCatch({
LinkToXML %>%
read_xml_justice() %>%
xml_new_root() %>%
xml_attr_recursive() %>%
mutate(paper_id = paper_id,
ra_id = ra_id,
Language = Language,
LinkToXML = LinkToXML)
},error=function(cond) {
message(paste("AHHHH:", paper_id))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
tibble()
})
one_cont_df
})
content_df_new
content_df_new %>% select(ra_ids, doc_index, txt,txt_word_count,  txt_word_count_total)
content_df_new %>% select(ra_ids)#, doc_index, txt,txt_word_count,  txt_word_count_total)
content_df_new
content_df_new %>% select(ra_id, doc_index, txt,txt_word_count,  txt_word_count_total)
content_df_new %>% select(ra_id, doc_index, txt,txt_word_count,  txt_word_count_total) %>% view()
content_df_new <-
justice$docs %>%
#filter(! paper_id %in% justice$content_df$paper_id) %>%
sample_n(4) %>%
pmap_dfr(function(paper_id, ra_id, LinkToXML, Language, ...){
one_cont_df <-
tryCatch({
LinkToXML %>%
read_xml_justice() %>%
xml_new_root() %>%
xml_attr_recursive() %>%
mutate(paper_id = paper_id,
ra_id = ra_id,
Language = Language,
LinkToXML = LinkToXML)
},error=function(cond) {
message(paste("AHHHH:", paper_id))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
tibble()
})
one_cont_df
})
content_df_new %>% select(ra_id, doc_index, txt,txt_word_count,  txt_word_count_total)
content_df_new %>% select(ra_id, doc_index, txt,txt_word_count,  txt_word_count_total) %>% view()
justice$content_df <- NULL
content_df_new <- NULL
tic <- Sys.time()
content_df_new <-
justice$docs %>%
filter(! paper_id %in% justice$content_df$paper_id) %>%
#sample_n(4) %>%
pmap_dfr(function(paper_id, ra_id, LinkToXML, Language, ...){
one_cont_df <-
tryCatch({
LinkToXML %>%
read_xml_justice() %>%
xml_new_root() %>%
xml_attr_recursive() %>%
mutate(paper_id = paper_id,
ra_id = ra_id,
Language = Language,
LinkToXML = LinkToXML)
},error=function(cond) {
message(paste("AHHHH:", paper_id))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
tibble()
})
one_cont_df
})
